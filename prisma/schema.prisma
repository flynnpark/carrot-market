// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  phone           String?    @unique
  email           String?    @unique
  name            String
  avatar          String?
  tokens          Token[]
  products        Product[]
  favorites       Favorite[]
  posts           Post[]
  answers         Answer[]
  agrees          Agree[]
  writtenReviews  Review[]   @relation(name: "writtenReviews")
  receivedReviews Review[]   @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  records         Record[]
  sreams          Stream[]
  messages        Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payload   String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      Int
  imageUrl    String?
  name        String
  price       Int
  description String?    @db.MediumText
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
  sales       Sale[]
  purchases   Purchase[]
  records     Record[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  content   String   @db.MediumText
  lat       Float?
  lon       Float?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers   Answer[]
  agrees    Agree[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  content   String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Agree {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  writtenForId Int
  writtenById  Int
  rating       Int
  content      String   @db.MediumText
  writtenFor   User     @relation(name: "receivedReviews", fields: [writtenForId], references: [id], onDelete: Cascade)
  writtenBy    User     @relation(name: "writtenReviews", fields: [writtenById], references: [id], onDelete: Cascade)
}

model Sale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Record {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     Int
  productId  Int
  recordType RecordType
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum RecordType {
  Purchase
  Sale
  Fav
}

model Stream {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @unique
  description String    @db.MediumText
  price       Int
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  streamId  Int
  message   String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
}
